// Prisma schema for MongoDB Atlas
// Adjust model fields as needed

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  password  String?
  role      String?
  active    Boolean? @default(true)
  createdAt DateTime @default(now())
}

model Clients {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String    @unique
  phone                 String?
  cpf                   String?
  birthDate             DateTime?
  address               String?
  historico             String?
  allergies             String?
  medicalHistory        String?
  emergencyContactName  String?
  emergencyContactPhone String?
  active                Boolean   @default(true)
  createdAt             DateTime  @default(now())

  // Relacionamentos
  files          PatientFile[]
  notes          PatientNote[]
  toothRecords   ToothRecord[]
  treatmentPlans TreatmentPlan[]
}

model PatientFile {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId    String   @db.ObjectId
  fileName     String // Nome do arquivo gerado (ex: 12345-documento.pdf)
  originalName String // Nome original do arquivo
  fileType     String
  fileSize     Int?
  description  String?
  createdAt    DateTime @default(now())

  patient Clients @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model PatientNote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId String   @db.ObjectId
  content   String
  noteType  String   @default("general")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento
  patient Clients @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model ToothRecord {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId   String   @db.ObjectId
  toothNumber Int
  procedure   String
  status      String   @default("pending")
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamento
  patient Clients @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model TreatmentPlan {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  patientId         String    @db.ObjectId
  title             String
  description       String
  status            String    @default("draft")
  estimatedCost     Float?
  estimatedSessions Int?
  startDate         DateTime?
  endDate           DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  patient Clients @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Agenda {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  date       String
  time       String
  title      String
  completed  Boolean  @default(false)
  clientId   String   @db.ObjectId
  clientName String
  value      Float
  note       String?
  duration   Int      @default(60)
  professionalId String? @db.ObjectId
  professionalName String?
  createdAt  DateTime @default(now())
}
